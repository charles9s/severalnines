/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
$hamburger-padding-x           : rem(15px) !default;
$hamburger-padding-y           : rem(15px) !default;
$hamburger-layer-width         : rem(24px) !default;
$hamburger-layer-height        : rem(3px) !default;
$hamburger-layer-spacing       : rem(6px) !default;
$hamburger-layer-color         : #ffffff !default;
$hamburger-layer-border-radius : 0px !default;
$hamburger-hover-opacity       : 0.7 !default;
$hamburger-active-layer-color  : $black !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter   : false !default;
$hamburger-hover-filter       : opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

// Hamburger
// ==================================================
.hamburger {
	padding: $hamburger-padding-y $hamburger-padding-x;
	cursor: pointer;

	transition-property: opacity, filter;
	transition-duration: 0.15s;
	transition-timing-function: linear;

	// Normalize (<button>)
	font: inherit;
	color: inherit;
	text-transform: none;
	background-color: transparent;
	border: 0;
	margin: 0;
	overflow: visible;

	&:hover {
		@if $hamburger-hover-use-filter == true {
			filter: $hamburger-hover-filter;
		}
		@else {
			opacity: $hamburger-hover-opacity;
		}
	}
}

.nav-is-visible {
	.hamburger:hover {
		@if $hamburger-hover-use-filter == true {
			filter: $hamburger-active-hover-filter;
		}
		@else {
			opacity: $hamburger-active-hover-opacity;
		}
	}

	.hamburger-inner,
	.hamburger-inner::before,
	.hamburger-inner::after {
		background-color: $hamburger-active-layer-color;
	}
}

.hamburger-box {
	width: $hamburger-layer-width;
	height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
	display: inline-block;
	position: relative;
}

.hamburger-inner {
	display: block;
	top: 50%;
	margin-top: $hamburger-layer-height / -2;

	&,
	&::before,
	&::after {
		width: $hamburger-layer-width;
		height: $hamburger-layer-height;
		background-color: $hamburger-layer-color;
		border-radius: $hamburger-layer-border-radius;
		position: absolute;
		transition-property: transform;
		transition-duration: 0.15s;
		transition-timing-function: ease;
	}

	&::before,
	&::after {
		content: "";
		display: block;
	}

	&::before {
		top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
	}

	&::after {
		bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
	}
}

$hamburger-types: (
				slider,
) !default;

@if index($hamburger-types, slider) {
	/*
	 * Slider
	 */
	.hamburger--slider {
		.hamburger-inner {
			top: $hamburger-layer-height / 2;

			&::before {
				top: $hamburger-layer-height + $hamburger-layer-spacing;
				transition-property: transform, opacity;
				transition-timing-function: ease;
				transition-duration: 0.15s;
			}

			&::after {
				top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
			}
		}
	}

	.nav-is-visible {
		.hamburger-inner {
			$y-offset: $hamburger-layer-spacing + $hamburger-layer-height;

			transform: translate3d(0, $y-offset, 0) rotate(45deg);

			&::before {
				transform: rotate(-45deg) translate3d($hamburger-layer-width / -7, $hamburger-layer-spacing * -1, 0);
				opacity: 0;
			}

			&::after {
				transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
			}
		}
	}
}



/* Responsive iframe
================================================== */


.wp-block-embed__wrapper {
	position: relative;
	overflow: hidden;
	width: 100%;
	padding-top: 56.25%; /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */

	iframe {
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		width: 100%;
		height: 100%;
	}
}

/* Global helpers
================================================== */

.screen-reader-text {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal !important;
}

.arrow {
  border: solid $pink;
  border-width: 0 2px 2px 0;
  display: inline-block;
  padding: 3px;
}

/* Arrows
================================================== */

.right {
  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
}

.left {
  transform: rotate(135deg);
  -webkit-transform: rotate(135deg);
}

.up {
  transform: rotate(-135deg);
  -webkit-transform: rotate(-135deg);
}

.down {
  transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
}